// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oYWp5DRpUvyyRAKjSJya8K
// Component: EYLZW5oNmE
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Nav from "../../Nav"; // plasmic-import: 1NPCYKvqMbV/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Button from "../../Button"; // plasmic-import: S20px5CzyEuzZP/component
import Select from "../../Select"; // plasmic-import: cpYU5wUK7lP6LN/component
import Tilt from "@plasmicpkgs/react-parallax-tilt"; // plasmic-import: PfY466VIuq/codeComponent

import { useScreenVariants as useScreenVariantse9M6Sv34SLfhdD } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: E9M6Sv34sLfhdD/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_influencer_campaign_page.module.css"; // plasmic-import: oYWp5DRpUvyyRAKjSJya8K/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: EYLZW5oNmE/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: IradBadVvV69_r/icon
import sprinkles1Cd2Da2A2SvgGNh7MptN3Bi01 from "./images/sprinkles1Cd2Da2A2Svg.svg"; // plasmic-import: GNh-7mptN3Bi01/picture
import sprinkles2D589E9E91SvgDvLeXXgwEolNx from "./images/sprinkles2D589E9E91Svg.svg"; // plasmic-import: dvLe-xXgwEolNX/picture
import image3AfarJgvX from "../pi_xl_a/images/image3.png"; // plasmic-import: AfarJGV-x/picture
import sprinkles35Ed717741SvgPIuKpfiX4081Rq from "./images/sprinkles35Ed717741Svg.svg"; // plasmic-import: PIuKpfiX4081Rq/picture

export type PlasmicHome__VariantMembers = {
  synced: "synced";
};

export type PlasmicHome__VariantsArgs = {
  synced?: SingleBooleanChoiceArg<"synced">;
};

type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>("synced");

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  nav?: p.Flex<typeof Nav>;
  hero?: p.Flex<"div">;
  body1?: p.Flex<"div">;
  tilt?: p.Flex<typeof Tilt>;
  httpsstudioplasmicapp?: p.Flex<"a">;
};

export interface DefaultHomeProps {
  synced?: SingleBooleanChoiceArg<"synced">;
  className?: string;
}

export const defaultHome__Args: Partial<PlasmicHome__ArgsType> = {};

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultHome__Args, props.args);
  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantse9M6Sv34SLfhdD()
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root,
              { [sty.rootsynced]: hasVariant(variants, "synced", "synced") }
            )}
          >
            <Nav
              data-plasmic-name={"nav"}
              data-plasmic-override={overrides.nav}
              className={classNames("__wab_instance", sty.nav, {
                [sty.navsynced]: hasVariant(variants, "synced", "synced")
              })}
              synced={
                hasVariant(variants, "synced", "synced") &&
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : hasVariant(variants, "synced", "synced")
                  ? true
                  : undefined
              }
            />

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div
                data-plasmic-name={"hero"}
                data-plasmic-override={overrides.hero}
                className={classNames(projectcss.all, sty.hero)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__ppWGv)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column___7CsWt)}
                  >
                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal___24GP
                      )}
                      direction={"up" as const}
                      triggerOnce={true}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jlS2Q
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jcwI3
                          )}
                        >
                          {"Play and Learn to Earn on Tezos with PiXL  "}
                        </div>

                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__hcXk0
                          )}
                          color={"blue" as const}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gqbke
                            )}
                          >
                            {"Buy Day pass"}
                          </div>
                        </Button>
                      </p.Stack>
                    </Reveal>
                  </div>

                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.column___4QaBn)}
                    />
                  ) : null}
                </p.Stack>
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"body1"}
                data-plasmic-override={overrides.body1}
                className={classNames(projectcss.all, sty.body1)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__eqGAm)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___19Yrv)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("150px" as const)
                        : ("200px" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: sprinkles1Cd2Da2A2SvgGNh7MptN3Bi01,
                      fullWidth: 180,
                      fullHeight: 150,
                      aspectRatio: 1.198795
                    }}
                  />
                </div>
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__vj96X)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mSooo)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__q7I1O
                        )}
                      >
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ve10
                            )}
                          >
                            <Reveal
                              className={classNames(
                                "__wab_instance",
                                sty.reveal__vUcD
                              )}
                              triggerOnce={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__nbtI
                                )}
                              >
                                {
                                  "In PiXL you battle dirty NFTs \n\nPiXL is the first evolving NFT RPG. It’s a love letter to Tezos - the technology, the artists, the community and the planet. It’s a play-to-earn game that changes every week - accessible to all (with an Entry Coin)."
                                }
                              </div>
                            </Reveal>
                          </div>
                        ) : null}

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___5TIzU)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("90px" as const)
                              : ("106px" as const)
                          }
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: sprinkles2D589E9E91SvgDvLeXXgwEolNx,
                            fullWidth: 138,
                            fullHeight: 150,
                            aspectRatio: 0.921739
                          }}
                        />
                      </p.Stack>
                    ) : null}
                  </div>
                ) : null}
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__lGcvZ)} />
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__zY1N)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qnEPj)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6Fwl4
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.columns__qI60L
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.column__yPG
                          )}
                        >
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              sty.h2___9XNjW
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__os20I
                              )}
                            />
                          </h2>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__tJtVb
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns___0Ioju
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__tO9M
                              )}
                            >
                              <h6
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h6,
                                  sty.h6__d6P1F
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__wa2GF
                                  )}
                                />
                              </h6>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__eP5P
                                )}
                              />
                            </div>
                          </div>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.columns__c8Ge0
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__p7TqA
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__lBfsE
                                )}
                              >
                                <Select
                                  className={classNames(
                                    "__wab_instance",
                                    sty.select__sEQmY
                                  )}
                                  placeholder={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__st2Od
                                      )}
                                    >
                                      {"1"}
                                    </div>
                                  }
                                />
                              </div>
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__bClh
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___6E1Ue
                                )}
                              >
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__le0ZQ
                                  )}
                                  color={"yellow" as const}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__gqp0G
                                    )}
                                  >
                                    {"ADD TO CART"}
                                  </div>
                                </Button>
                              </div>
                            </div>
                          </p.Stack>
                        </p.Stack>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___2U0L7
                          )}
                        >
                          <Tilt
                            data-plasmic-name={"tilt"}
                            data-plasmic-override={overrides.tilt}
                            className={classNames("__wab_instance", sty.tilt)}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__kpJmm)}
                              displayHeight={"auto" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"none" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              src={{
                                src: image3AfarJgvX,
                                fullWidth: 512,
                                fullHeight: 512,
                                aspectRatio: undefined
                              }}
                            />
                          </Tilt>
                        </div>
                      </p.Stack>
                    </div>
                  </div>
                ) : null}
              </div>
            ) : null}
            {true ? (
              <div
                className={classNames(projectcss.all, sty.freeBox___6Uevv)}
              />
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__j146X)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__n8TF)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__v6Dw1)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__ikZX
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__z2Sfa
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__auy1
                            )}
                          />
                        </div>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.column__rzUpk
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__yX6C)}
                            displayHeight={"auto" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("150px" as const)
                                : ("200px" as const)
                            }
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"auto" as const}
                            loading={"lazy" as const}
                            src={{
                              src: sprinkles1Cd2Da2A2SvgGNh7MptN3Bi01,
                              fullWidth: 180,
                              fullHeight: 150,
                              aspectRatio: 1.198795
                            }}
                          />

                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              sty.h2__r0Yu
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__lWmr7
                              )}
                            />
                          </h2>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ykmH3
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__bMcKc
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__fqJ1L
                              )}
                            >
                              <h6
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h6,
                                  sty.h6__y7ZDy
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___28TGv
                                  )}
                                />
                              </h6>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__yoT2T
                                )}
                              />
                            </div>
                          </div>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.columns___26Jjc
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__gJjZo
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__f0LFf
                                )}
                              >
                                <Select
                                  className={classNames(
                                    "__wab_instance",
                                    sty.select__xyNgx
                                  )}
                                  placeholder={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__tpXw4
                                      )}
                                    >
                                      {"1"}
                                    </div>
                                  }
                                />
                              </div>
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__jWyDu
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__jmnIp
                                )}
                              >
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__p5CyQ
                                  )}
                                  color={"pink" as const}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__uhlcn
                                    )}
                                  >
                                    {"ADD TO CART"}
                                  </div>
                                </Button>
                              </div>
                            </div>
                          </p.Stack>
                        </p.Stack>
                      </div>
                    </div>
                  </div>
                ) : null}

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__fthMj)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("90px" as const)
                      : ("106px" as const)
                  }
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: sprinkles2D589E9E91SvgDvLeXXgwEolNx,
                    fullWidth: 138,
                    fullHeight: 150,
                    aspectRatio: 0.921739
                  }}
                />
              </p.Stack>
            ) : null}
            {true ? (
              <div
                className={classNames(projectcss.all, sty.freeBox___0PcGu)}
              />
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__kGMv)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1F1J9)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___8IR97
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pyE5M
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__bqlGh
                            )}
                          >
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.column___7KxNg
                              )}
                            >
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  sty.h2___1P1Gn
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___0F7N
                                  )}
                                />
                              </h2>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__qGbSs
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.columns__y8KHf
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__lifO2
                                  )}
                                >
                                  <h6
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h6,
                                      sty.h6__dip8J
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__vdYs1
                                      )}
                                    />
                                  </h6>

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__zK3JC
                                    )}
                                  />
                                </div>
                              </div>

                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.columns___1AAup
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__u1XG
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__ni6XL
                                    )}
                                  >
                                    <Select
                                      className={classNames(
                                        "__wab_instance",
                                        sty.select__j0Jg7
                                      )}
                                      placeholder={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__akIgP
                                          )}
                                        >
                                          {"1"}
                                        </div>
                                      }
                                    />
                                  </div>
                                </div>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__rlKyz
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__xjF36
                                    )}
                                  >
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__urhK1
                                      )}
                                      color={"yellow" as const}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__rr0OU
                                        )}
                                      >
                                        {"ADD TO CART"}
                                      </div>
                                    </Button>
                                  </div>
                                </div>
                              </p.Stack>
                            </p.Stack>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__o4TfF
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__gMvIg
                                )}
                              />
                            </div>
                          </div>
                        </div>
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </div>
            ) : null}
            {true ? (
              <div
                className={classNames(projectcss.all, sty.freeBox___90Dgu)}
              />
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__miBR)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jn44P)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__e56Gn)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns___4S515
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__ylb8
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__u8JZy
                            )}
                          />
                        </div>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.column__lWhct
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__pItW)}
                            displayHeight={"auto" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("150px" as const)
                                : ("200px" as const)
                            }
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"auto" as const}
                            loading={"lazy" as const}
                            src={{
                              src: sprinkles1Cd2Da2A2SvgGNh7MptN3Bi01,
                              fullWidth: 180,
                              fullHeight: 150,
                              aspectRatio: 1.198795
                            }}
                          />

                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              sty.h2__aIhHy
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__tUyV
                              )}
                            />
                          </h2>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bH5El
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__uuFbK
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__qWfGr
                              )}
                            >
                              <h6
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h6,
                                  sty.h6__yXlUa
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__mv9Jk
                                  )}
                                />
                              </h6>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__f7DzP
                                )}
                              />
                            </div>
                          </div>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.columns__lVq3J
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column___7Msz1
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___2Tqon
                                )}
                              >
                                <Select
                                  className={classNames(
                                    "__wab_instance",
                                    sty.select__w9Sat
                                  )}
                                  placeholder={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__jhZtD
                                      )}
                                    >
                                      {"1"}
                                    </div>
                                  }
                                />
                              </div>
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column___7KDv
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__eZaOs
                                )}
                              >
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button___6ZZsh
                                  )}
                                  color={"pink" as const}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__yuGn
                                    )}
                                  >
                                    {"ADD TO CART"}
                                  </div>
                                </Button>
                              </div>
                            </div>
                          </p.Stack>
                        </p.Stack>
                      </div>
                    </div>
                  </div>
                ) : null}

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__c2Exb)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("90px" as const)
                      : ("166px" as const)
                  }
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: sprinkles35Ed717741SvgPIuKpfiX4081Rq,
                    fullWidth: 130,
                    fullHeight: 150,
                    aspectRatio: 0.865591
                  }}
                />
              </p.Stack>
            ) : null}

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qHFi)}
            >
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__dZMb)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__k1QnP)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5MCi
                      )}
                    >
                      {
                        "© Company. All rights reserved. This site proudly built with  "
                      }
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__i1ZWo)}
                  >
                    <a
                      data-plasmic-name={"httpsstudioplasmicapp"}
                      data-plasmic-override={overrides.httpsstudioplasmicapp}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.httpsstudioplasmicapp,
                        "" as const
                      )}
                      href={"https://studio.plasmic.app/" as const}
                    >
                      {"Plasmic"}
                    </a>
                  </p.Stack>
                </div>
              ) : null}
            </p.Stack>
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "nav", "hero", "body1", "tilt", "httpsstudioplasmicapp"],
  nav: ["nav"],
  hero: ["hero"],
  body1: ["body1"],
  tilt: ["tilt"],
  httpsstudioplasmicapp: ["httpsstudioplasmicapp"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  nav: typeof Nav;
  hero: "div";
  body1: "div";
  tilt: typeof Tilt;
  httpsstudioplasmicapp: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps
    });

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    nav: makeNodeComponent("nav"),
    hero: makeNodeComponent("hero"),
    body1: makeNodeComponent("body1"),
    tilt: makeNodeComponent("tilt"),
    httpsstudioplasmicapp: makeNodeComponent("httpsstudioplasmicapp"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
