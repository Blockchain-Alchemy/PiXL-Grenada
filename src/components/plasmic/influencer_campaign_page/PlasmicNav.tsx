// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oYWp5DRpUvyyRAKjSJya8K
// Component: 1NPCYKvqMbV
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import Button from '../../Button'; // plasmic-import: S20px5CzyEuzZP/component

import { useScreenVariants as useScreenVariantse9M6Sv34SLfhdD } from './PlasmicGlobalVariant__Screen'; // plasmic-import: E9M6Sv34sLfhdD/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_influencer_campaign_page.module.css'; // plasmic-import: oYWp5DRpUvyyRAKjSJya8K/projectcss
import sty from './PlasmicNav.module.css'; // plasmic-import: 1NPCYKvqMbV/css

import ChecksvgIcon from './icons/PlasmicIcon__Checksvg'; // plasmic-import: IradBadVvV69_r/icon
import logoPixLpngKb9Khcgdx from '../pi_xl_a/images/logoPixLpng.png'; // plasmic-import: Kb9Khcgdx/picture

export type PlasmicNav__VariantMembers = {
  synced: 'synced';
};

export type PlasmicNav__VariantsArgs = {
  synced?: SingleBooleanChoiceArg<'synced'>;
};

type VariantPropType = keyof PlasmicNav__VariantsArgs;
export const PlasmicNav__VariantProps = new Array<VariantPropType>('synced');

export type PlasmicNav__ArgsType = {};
type ArgPropType = keyof PlasmicNav__ArgsType;
export const PlasmicNav__ArgProps = new Array<ArgPropType>();

export type PlasmicNav__OverridesType = {
  root?: p.Flex<'div'>;
  freeBox?: p.Flex<'div'>;
  link?: p.Flex<'a'>;
  img?: p.Flex<typeof p.PlasmicImg>;
  spacer?: p.Flex<'div'>;
  aboutButton?: p.Flex<typeof Button>;
  dayPassButton?: p.Flex<typeof Button>;
  itemsButton?: p.Flex<typeof Button>;
  missionsButton?: p.Flex<typeof Button>;
  yourPlayerButton?: p.Flex<typeof Button>;
  playButton?: p.Flex<typeof Button>;
  syncButton?: p.Flex<typeof Button>;
  text?: p.Flex<'div'>;
  svg?: p.Flex<'svg'>;
};

export interface DefaultNavProps {
  synced?: SingleBooleanChoiceArg<'synced'>;
  className?: string;
}

function PlasmicNav__RenderFunc(props: {
  variants: PlasmicNav__VariantsArgs;
  args: PlasmicNav__ArgsType;
  overrides: PlasmicNav__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantse9M6Sv34SLfhdD(),
  });

  return (
    <p.Stack
      as={'div'}
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootsynced]: hasVariant(variants, 'synced', 'synced') }
      )}
    >
      <p.Stack
        as={'div'}
        data-plasmic-name={'freeBox'}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxsynced]: hasVariant(variants, 'synced', 'synced'),
        })}
      >
        <a
          data-plasmic-name={'link'}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          href={'/' as const}
        >
          <p.PlasmicImg
            data-plasmic-name={'img'}
            data-plasmic-override={overrides.img}
            alt={''}
            className={classNames(sty.img)}
            displayHeight={'auto' as const}
            displayMaxHeight={'none' as const}
            displayMaxWidth={'100%' as const}
            displayMinHeight={'0' as const}
            displayMinWidth={'0' as const}
            displayWidth={'77px' as const}
            loading={'lazy' as const}
            src={{
              src: logoPixLpngKb9Khcgdx,
              fullWidth: 750,
              fullHeight: 750,
              aspectRatio: undefined,
            }}
          />
        </a>

        {(hasVariant(globalVariants, 'screen', 'mobileOnly') ? true : true) ? (
          <div
            data-plasmic-name={'spacer'}
            data-plasmic-override={overrides.spacer}
            className={classNames(projectcss.all, sty.spacer)}
          />
        ) : null}
        {true ? (
          <Button
            data-plasmic-name={'aboutButton'}
            data-plasmic-override={overrides.aboutButton}
            className={classNames('__wab_instance', sty.aboutButton, {
              [sty.aboutButtonsynced]: hasVariant(variants, 'synced', 'synced'),
            })}
            color={'blue' as const}
            link={'/about' as const}
          >
            {'About'}
          </Button>
        ) : null}
        {true ? (
          <Button
            data-plasmic-name={'dayPassButton'}
            data-plasmic-override={overrides.dayPassButton}
            className={classNames('__wab_instance', sty.dayPassButton)}
            color={'blue' as const}
            link={'/day-pass' as const}
          >
            {'Buy day pass'}
          </Button>
        ) : null}
        {(hasVariant(globalVariants, 'screen', 'mobileOnly') ? true : true) ? (
          <Button
            data-plasmic-name={'itemsButton'}
            data-plasmic-override={overrides.itemsButton}
            className={classNames('__wab_instance', sty.itemsButton)}
            color={'blue' as const}
            link={'/items' as const}
          >
            {'items'}
          </Button>
        ) : null}
        {(hasVariant(globalVariants, 'screen', 'mobileOnly') ? true : true) ? (
          <Button
            data-plasmic-name={'missionsButton'}
            data-plasmic-override={overrides.missionsButton}
            className={classNames('__wab_instance', sty.missionsButton)}
            color={'blue' as const}
            link={'/missions' as const}
          >
            {'missions'}
          </Button>
        ) : null}
        {(
          hasVariant(variants, 'synced', 'synced') &&
          hasVariant(globalVariants, 'screen', 'mobileOnly')
            ? true
            : hasVariant(variants, 'synced', 'synced')
            ? true
            : false
        ) ? (
          <Button
            data-plasmic-name={'yourPlayerButton'}
            data-plasmic-override={overrides.yourPlayerButton}
            className={classNames('__wab_instance', sty.yourPlayerButton, {
              [sty.yourPlayerButtonsynced]: hasVariant(
                variants,
                'synced',
                'synced'
              ),
            })}
            color={'blue' as const}
          >
            {'Your Player'}
          </Button>
        ) : null}
        {(
          hasVariant(variants, 'synced', 'synced') &&
          hasVariant(globalVariants, 'screen', 'mobileOnly')
            ? true
            : hasVariant(variants, 'synced', 'synced')
            ? true
            : false
        ) ? (
          <Button
            data-plasmic-name={'playButton'}
            data-plasmic-override={overrides.playButton}
            className={classNames('__wab_instance', sty.playButton, {
              [sty.playButtonsynced]: hasVariant(variants, 'synced', 'synced'),
            })}
            color={'red' as const}
            link={'/play' as const}
          >
            {'PLAY'}
          </Button>
        ) : null}
        {(hasVariant(globalVariants, 'screen', 'mobileOnly') ? true : true) ? (
          <Button
            data-plasmic-name={'syncButton'}
            data-plasmic-override={overrides.syncButton}
            className={classNames('__wab_instance', sty.syncButton, {
              [sty.syncButtonsynced]: hasVariant(variants, 'synced', 'synced'),
            })}
            color={'blue' as const}
            endIcon={
              <ChecksvgIcon
                data-plasmic-name={'svg'}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={'img'}
              />
            }
          >
            <div
              data-plasmic-name={'text'}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text,
                { [sty.textsynced]: hasVariant(variants, 'synced', 'synced') }
              )}
            >
              {hasVariant(variants, 'synced', 'synced') ? 'unSync' : 'Sync'}
            </div>
          </Button>
        ) : null}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'freeBox',
    'link',
    'img',
    'spacer',
    'aboutButton',
    'dayPassButton',
    'itemsButton',
    'missionsButton',
    'yourPlayerButton',
    'playButton',
    'syncButton',
    'text',
    'svg',
  ],
  freeBox: [
    'freeBox',
    'link',
    'img',
    'spacer',
    'aboutButton',
    'dayPassButton',
    'itemsButton',
    'missionsButton',
    'yourPlayerButton',
    'playButton',
    'syncButton',
    'text',
    'svg',
  ],
  link: ['link', 'img'],
  img: ['img'],
  spacer: ['spacer'],
  aboutButton: ['aboutButton'],
  dayPassButton: ['dayPassButton'],
  itemsButton: ['itemsButton'],
  missionsButton: ['missionsButton'],
  yourPlayerButton: ['yourPlayerButton'],
  playButton: ['playButton'],
  syncButton: ['syncButton', 'text', 'svg'],
  text: ['text'],
  svg: ['svg'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
  freeBox: 'div';
  link: 'a';
  img: typeof p.PlasmicImg;
  spacer: 'div';
  aboutButton: typeof Button;
  dayPassButton: typeof Button;
  itemsButton: typeof Button;
  missionsButton: typeof Button;
  yourPlayerButton: typeof Button;
  playButton: typeof Button;
  syncButton: typeof Button;
  text: 'div';
  svg: 'svg';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNav__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNav__VariantsArgs;
    args?: PlasmicNav__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNav__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNav__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNav__ArgProps,
          internalVariantPropNames: PlasmicNav__VariantProps,
        }),
      [props, nodeName]
    );

    return PlasmicNav__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicNav';
  } else {
    func.displayName = `PlasmicNav.${nodeName}`;
  }
  return func;
}

export const PlasmicNav = Object.assign(
  // Top-level PlasmicNav renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent('freeBox'),
    link: makeNodeComponent('link'),
    img: makeNodeComponent('img'),
    spacer: makeNodeComponent('spacer'),
    aboutButton: makeNodeComponent('aboutButton'),
    dayPassButton: makeNodeComponent('dayPassButton'),
    itemsButton: makeNodeComponent('itemsButton'),
    missionsButton: makeNodeComponent('missionsButton'),
    yourPlayerButton: makeNodeComponent('yourPlayerButton'),
    playButton: makeNodeComponent('playButton'),
    syncButton: makeNodeComponent('syncButton'),
    text: makeNodeComponent('text'),
    svg: makeNodeComponent('svg'),

    // Metadata about props expected for PlasmicNav
    internalVariantProps: PlasmicNav__VariantProps,
    internalArgProps: PlasmicNav__ArgProps,
  }
);

export default PlasmicNav;
/* prettier-ignore-end */
