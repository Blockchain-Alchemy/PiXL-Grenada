// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oYWp5DRpUvyyRAKjSJya8K
// Component: 30pT1P3pcW
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../influencer_campaign_page/plasmic_influencer_campaign_page.module.css"; // plasmic-import: oYWp5DRpUvyyRAKjSJya8K/projectcss
import sty from "./PlasmicLoadingBar.module.css"; // plasmic-import: 30pT1P3pcW/css

export type PlasmicLoadingBar__VariantMembers = {};

export type PlasmicLoadingBar__VariantsArgs = {};
type VariantPropType = keyof PlasmicLoadingBar__VariantsArgs;
export const PlasmicLoadingBar__VariantProps = new Array<VariantPropType>();

export type PlasmicLoadingBar__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLoadingBar__ArgsType;
export const PlasmicLoadingBar__ArgProps = new Array<ArgPropType>("children");

export type PlasmicLoadingBar__OverridesType = {
  root?: p.Flex<"div">;
  loading?: p.Flex<"div">;
  progression?: p.Flex<"div">;
  percent?: p.Flex<"div">;
};

export interface DefaultLoadingBarProps {
  children?: React.ReactNode;
  className?: string;
}

export const defaultLoadingBar__Args: Partial<PlasmicLoadingBar__ArgsType> = {};

function PlasmicLoadingBar__RenderFunc(props: {
  variants: PlasmicLoadingBar__VariantsArgs;
  args: PlasmicLoadingBar__ArgsType;
  overrides: PlasmicLoadingBar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultLoadingBar__Args, props.args);
  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"loading"}
        data-plasmic-override={overrides.loading}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.loading
        )}
      >
        {"Loading"}
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"progression"}
        data-plasmic-override={overrides.progression}
        hasGap={true}
        className={classNames(projectcss.all, sty.progression)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "0",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}

        {true ? (
          <div
            data-plasmic-name={"percent"}
            data-plasmic-override={overrides.percent}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.percent
            )}
          >
            {"%"}
          </div>
        ) : null}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "loading", "progression", "percent"],
  loading: ["loading"],
  progression: ["progression", "percent"],
  percent: ["percent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  loading: "div";
  progression: "div";
  percent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoadingBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoadingBar__VariantsArgs;
    args?: PlasmicLoadingBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLoadingBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLoadingBar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLoadingBar__ArgProps,
      internalVariantPropNames: PlasmicLoadingBar__VariantProps
    });

    return PlasmicLoadingBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLoadingBar";
  } else {
    func.displayName = `PlasmicLoadingBar.${nodeName}`;
  }
  return func;
}

export const PlasmicLoadingBar = Object.assign(
  // Top-level PlasmicLoadingBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    loading: makeNodeComponent("loading"),
    progression: makeNodeComponent("progression"),
    percent: makeNodeComponent("percent"),

    // Metadata about props expected for PlasmicLoadingBar
    internalVariantProps: PlasmicLoadingBar__VariantProps,
    internalArgProps: PlasmicLoadingBar__ArgProps
  }
);

export default PlasmicLoadingBar;
/* prettier-ignore-end */
